// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "ourgym/models"

	mock "github.com/stretchr/testify/mock"
)

// ClassRepository is an autogenerated mock type for the ClassRepository type
type ClassRepository struct {
	mock.Mock
}

// CountClass provides a mock function with given fields:
func (_m *ClassRepository) CountClass() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Create provides a mock function with given fields: classRequest
func (_m *ClassRepository) Create(classRequest models.Class) models.Class {
	ret := _m.Called(classRequest)

	var r0 models.Class
	if rf, ok := ret.Get(0).(func(models.Class) models.Class); ok {
		r0 = rf(classRequest)
	} else {
		r0 = ret.Get(0).(models.Class)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ClassRepository) Delete(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: ids
func (_m *ClassRepository) DeleteMany(ids string) bool {
	ret := _m.Called(ids)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields: classType, name
func (_m *ClassRepository) GetAll(classType string, name string) []models.Class {
	ret := _m.Called(classType, name)

	var r0 []models.Class
	if rf, ok := ret.Get(0).(func(string, string) []models.Class); ok {
		r0 = rf(classType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Class)
		}
	}

	return r0
}

// GetOneByFilter provides a mock function with given fields: key, value
func (_m *ClassRepository) GetOneByFilter(key string, value interface{}) models.Class {
	ret := _m.Called(key, value)

	var r0 models.Class
	if rf, ok := ret.Get(0).(func(string, interface{}) models.Class); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(models.Class)
	}

	return r0
}

// Update provides a mock function with given fields: id, userRequest
func (_m *ClassRepository) Update(id string, userRequest models.Class) models.Class {
	ret := _m.Called(id, userRequest)

	var r0 models.Class
	if rf, ok := ret.Get(0).(func(string, models.Class) models.Class); ok {
		r0 = rf(id, userRequest)
	} else {
		r0 = ret.Get(0).(models.Class)
	}

	return r0
}

type mockConstructorTestingTNewClassRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassRepository creates a new instance of ClassRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassRepository(t mockConstructorTestingTNewClassRepository) *ClassRepository {
	mock := &ClassRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
