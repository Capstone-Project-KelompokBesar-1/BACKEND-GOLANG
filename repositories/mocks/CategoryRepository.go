// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "ourgym/models"

	mock "github.com/stretchr/testify/mock"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: name
func (_m *CategoryRepository) GetAll(name string) []models.Category {
	ret := _m.Called(name)

	var r0 []models.Category
	if rf, ok := ret.Get(0).(func(string) []models.Category); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Category)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *CategoryRepository) GetByID(id string) models.Category {
	ret := _m.Called(id)

	var r0 models.Category
	if rf, ok := ret.Get(0).(func(string) models.Category); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Category)
	}

	return r0
}

type mockConstructorTestingTNewCategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryRepository(t mockConstructorTestingTNewCategoryRepository) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
