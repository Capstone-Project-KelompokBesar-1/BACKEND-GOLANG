// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "ourgym/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: id, newPassword
func (_m *UserRepository) ChangePassword(id string, newPassword string) bool {
	ret := _m.Called(id, newPassword)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(id, newPassword)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CountUser provides a mock function with given fields:
func (_m *UserRepository) CountUser() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Create provides a mock function with given fields: userRequest
func (_m *UserRepository) Create(userRequest models.User) models.User {
	ret := _m.Called(userRequest)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(userRequest)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *UserRepository) Delete(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: ids
func (_m *UserRepository) DeleteMany(ids string) bool {
	ret := _m.Called(ids)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields: name
func (_m *UserRepository) GetAll(name string) []models.User {
	ret := _m.Called(name)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(string) []models.User); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	return r0
}

// GetOneByFilter provides a mock function with given fields: key, value
func (_m *UserRepository) GetOneByFilter(key string, value interface{}) models.User {
	ret := _m.Called(key, value)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string, interface{}) models.User); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

// Update provides a mock function with given fields: id, userRequest
func (_m *UserRepository) Update(id string, userRequest models.User) models.User {
	ret := _m.Called(id, userRequest)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string, models.User) models.User); ok {
		r0 = rf(id, userRequest)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
