// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "ourgym/models"

	mock "github.com/stretchr/testify/mock"

	snap "github.com/midtrans/midtrans-go/snap"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CountTotalIncome provides a mock function with given fields:
func (_m *TransactionRepository) CountTotalIncome() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Create provides a mock function with given fields: classRequest
func (_m *TransactionRepository) Create(classRequest models.Transaction) (snap.Response, error) {
	ret := _m.Called(classRequest)

	var r0 snap.Response
	if rf, ok := ret.Get(0).(func(models.Transaction) snap.Response); ok {
		r0 = rf(classRequest)
	} else {
		r0 = ret.Get(0).(snap.Response)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Transaction) error); ok {
		r1 = rf(classRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TransactionRepository) Delete(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: ids
func (_m *TransactionRepository) DeleteMany(ids string) bool {
	ret := _m.Called(ids)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *TransactionRepository) GetAll() []models.Transaction {
	ret := _m.Called()

	var r0 []models.Transaction
	if rf, ok := ret.Get(0).(func() []models.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *TransactionRepository) GetByID(id string) models.Transaction {
	ret := _m.Called(id)

	var r0 models.Transaction
	if rf, ok := ret.Get(0).(func(string) models.Transaction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: userID, status
func (_m *TransactionRepository) GetByUserID(userID string, status string) []models.Transaction {
	ret := _m.Called(userID, status)

	var r0 []models.Transaction
	if rf, ok := ret.Get(0).(func(string, string) []models.Transaction); ok {
		r0 = rf(userID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	return r0
}

// GetHistory provides a mock function with given fields:
func (_m *TransactionRepository) GetHistory() []models.Transaction {
	ret := _m.Called()

	var r0 []models.Transaction
	if rf, ok := ret.Get(0).(func() []models.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	return r0
}

// Update provides a mock function with given fields: id, userRequest
func (_m *TransactionRepository) Update(id string, userRequest models.Transaction) models.Transaction {
	ret := _m.Called(id, userRequest)

	var r0 models.Transaction
	if rf, ok := ret.Get(0).(func(string, models.Transaction) models.Transaction); ok {
		r0 = rf(id, userRequest)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	return r0
}

// UpdatedByMidtransAPI provides a mock function with given fields: transactionRequest
func (_m *TransactionRepository) UpdatedByMidtransAPI(transactionRequest models.Transaction) error {
	ret := _m.Called(transactionRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Transaction) error); ok {
		r0 = rf(transactionRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepository(t mockConstructorTestingTNewTransactionRepository) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
